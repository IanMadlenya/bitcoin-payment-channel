-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Provides Word128, Word192 and Word256 and a way of producing other large words if required.
--   
--   Provides Word128, Word192 and Word256 and a way of producing other
--   large words if required.
@package largeword
@version 1.2.5


-- | Provides Word128, Word192 and Word256 and a way of producing other
--   large words if required.
module Data.LargeWord
data LargeKey a b
LargeKey :: a -> b -> LargeKey a b
type Word96 = LargeKey Word32 Word64
type Word128 = LargeKey Word64 Word64
type Word160 = LargeKey Word32 Word128
type Word192 = LargeKey Word64 Word128
type Word224 = LargeKey Word32 Word192
type Word256 = LargeKey Word64 Word192
loHalf :: LargeKey a b -> a
hiHalf :: LargeKey a b -> b
instance (GHC.Classes.Eq a, GHC.Classes.Eq b) => GHC.Classes.Eq (Data.LargeWord.LargeKey a b)
instance Data.LargeWord.LargeWord GHC.Word.Word8
instance Data.LargeWord.LargeWord GHC.Word.Word16
instance Data.LargeWord.LargeWord GHC.Word.Word32
instance Data.LargeWord.LargeWord GHC.Word.Word64
instance (GHC.Classes.Ord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Num.Num a, Data.LargeWord.LargeWord a, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Num.Num b, Data.LargeWord.LargeWord b) => Data.LargeWord.LargeWord (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Ord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Num.Num a, Data.LargeWord.LargeWord a, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Num.Num b, Data.LargeWord.LargeWord b) => GHC.Show.Show (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Ord b, GHC.Classes.Ord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Num.Num a, Data.LargeWord.LargeWord a, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Num.Num b, Data.LargeWord.LargeWord b) => GHC.Num.Num (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Num.Num a, Data.LargeWord.LargeWord a, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Num.Num b, Data.LargeWord.LargeWord b) => Data.Bits.Bits (Data.LargeWord.LargeKey a b)
instance (Data.LargeWord.LargeWord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Classes.Ord a, GHC.Num.Num a, Data.LargeWord.LargeWord b, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Classes.Ord b, GHC.Num.Num b) => Data.Bits.FiniteBits (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Ord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Enum.Bounded a, GHC.Real.Integral a, Data.LargeWord.LargeWord a, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Enum.Bounded b, GHC.Real.Integral b, Data.LargeWord.LargeWord b) => GHC.Enum.Bounded (Data.LargeWord.LargeKey a b)
instance (GHC.Enum.Bounded a, GHC.Enum.Bounded b, GHC.Enum.Enum b, GHC.Enum.Enum a, GHC.Classes.Ord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Num.Num a, Data.LargeWord.LargeWord a, GHC.Classes.Ord b, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Num.Num b, Data.LargeWord.LargeWord b) => GHC.Real.Integral (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Ord a, Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Num.Num a, GHC.Enum.Bounded a, GHC.Enum.Bounded b, GHC.Enum.Enum a, GHC.Enum.Enum b, Data.LargeWord.LargeWord a, GHC.Classes.Ord b, Data.Bits.Bits b, Data.Bits.FiniteBits b, GHC.Num.Num b, Data.LargeWord.LargeWord b) => GHC.Real.Real (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Eq a, GHC.Enum.Bounded a, GHC.Num.Num a, GHC.Enum.Enum b, GHC.Enum.Enum a, GHC.Enum.Bounded b, GHC.Num.Num b) => GHC.Enum.Enum (Data.LargeWord.LargeKey a b)
instance (Data.Binary.Class.Binary a, Data.Binary.Class.Binary b) => Data.Binary.Class.Binary (Data.LargeWord.LargeKey a b)
instance (GHC.Classes.Ord a, GHC.Classes.Ord b) => GHC.Classes.Ord (Data.LargeWord.LargeKey a b)
